<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use App\Models\TelegramUser;
use App\Models\TelegramMessage;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class TelegramWebhookController extends Controller
{
    public function handle(Request $request)
    {
        try {
            $data = $request->validate([
                'chat_id'       => 'required|numeric',
                'message'       => 'required|string',
                'username'      => 'nullable|string',
                'first_name'    => 'nullable|string',
                'last_name'     => 'nullable|string',
                'language_code' => 'nullable|string',
                'is_bot'        => 'nullable|boolean',
            ]);

            \Log::info('Request data:', $data);

            $user = TelegramUser::updateOrCreate(['id' => $data['chat_id']], [
                'username'      => $data['username'] ?? null,
                'first_name'    => $data['first_name'] ?? null,
                'last_name'     => $data['last_name'] ?? null,
                'language_code' => $data['language_code'] ?? null,
                'is_bot'        => $data['is_bot'] ?? false,
            ]);

            $nlp = $this->askNlp($data['message']);

            \Log::info('NLP result:', $nlp);

            $country = $nlp['country'];
            $days = $nlp['days'];

            if (empty($country) && empty($days)) {
                $reply = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.";
                return response()->json(['reply' => $reply]);
            }

            $query = DB::table('esim_plans');

            if (!empty($days)) {
                $query->where('period', '>=', $days);
            }

            if (!empty($country)) {
                $query->where('country', 'LIKE', "%{$country}%");
            }

            $plans = $query->get();
            $reply = $this->askGptWithPlans($data['message'], $plans);

            \Log::info('Plans found:', ['count' => $plans->count()]);

            if ($plans->isEmpty()) {
              //  $reply = "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö eSIM-–ø–ª–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
            } else {
                //$reply = "–î–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ {$country}" . ($days ? " –Ω–∞ {$days} –¥–Ω–µ–π" : "") . " —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n";

                foreach ($plans as $plan) {
                  //  $reply .= "Plan: {$plan->plan_name}\n";
                   // $reply .= "–¶–µ–Ω–∞: {$plan->price} {$plan->currency}\n";
                   // $reply .= "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {$plan->period} –¥–Ω–µ–π\n\n";
                }
            }

            TelegramMessage::create([
                'telegram_user_id' => $user->id,
                'question'         => $data['message'],
                'answer'           => $reply,
            ]);

            return response()->json(['reply' => $reply]);
        } catch (\Exception $e) {
            \Log::error('Exception in handle:', [
                'message' => $e->getMessage(),
                'trace'   => $e->getTraceAsString(),
            ]);

            return response()->json([
                'reply' => '‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    private function askNlp(string $query): array
    {
        try {
            $response = Http::timeout(5)->post('http://127.0.0.1:8000/extract', [
                'text' => $query,
            ]);

            if ($response->successful()) {
                $data = $response->json();

                return [
                    'country' => $data['country'] ?? null,
                    'days'    => $data['days'] ?? null,
                ];
            }

            Log::error('NLP API error', [
                'status' => $response->status(),
                'body'   => $response->body(),
            ]);
        } catch (\Exception $e) {
            Log::error('NLP exception', ['message' => $e->getMessage()]);
        }

        return [
            'country' => null,
            'days'    => null,
        ];
    }

    private function askGptWithPlans(string $userMessage, $plans): string
    {
        // –¢–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        $systemPrompt = <<<PROMPT
–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—é—â–∏–π—Å—è –≤ eSIM-–ø–ª–∞–Ω–∞—Ö –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Yesim.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–∏—Ä–∞—Ç—å eSIM-–ø–ª–∞–Ω –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É. –ù–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–∏:
- —Å—Ç—Ä–∞–Ω—É, –∫—É–¥–∞ –æ–Ω –µ–¥–µ—Ç,
- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π,
- –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä—ë–º —Ç—Ä–∞—Ñ–∏–∫–∞).

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ API. –ï—Å–ª–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–ª–∞–Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ª–∏—á–∏–µ –∑–≤–æ–Ω–∫–æ–≤ ‚Äî –º–æ–∂–µ—à—å —ç—Ç–æ —É–ø–æ–º—è–Ω—É—Ç—å, –Ω–æ –Ω–µ –¥–µ–ª–∞–π –Ω–∞ —ç—Ç–æ–º –∞–∫—Ü–µ–Ω—Ç. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å ‚Äî –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–ª–∞–Ω—ã.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø–æ–µ–∑–¥–∫–∞–º–∏, —Å—Ç—Ä–∞–Ω–∞–º–∏, eSIM, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º, –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑—å—é –∏–ª–∏ Yesim, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –∏ —Å–∫–∞–∂–∏:

¬´–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ù–æ –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ eSIM –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ ‚Äî —è –ø–æ–º–æ–≥—É —Å —Ä–∞–¥–æ—Å—Ç—å—é! ‚úàÔ∏è¬ª

–ï—Å–ª–∏ —Ç—ã –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ—á–Ω–æ–º –æ—Ç–≤–µ—Ç–µ ‚Äî –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π. –õ—É—á—à–µ —Å–∫–∞–∂–∏:

¬´–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º, –Ω–æ –ø–æ —á–∞—Å—Ç–∏ eSIM –æ—Ç Yesim –∑–Ω–∞—é –≤—Å—ë. –ù–∞–ø–∏—à–∏, –∫—É–¥–∞ —Ç—ã –µ–¥–µ—à—å –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω üåç¬ª

–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.
PROMPT;

        if ($plans->isEmpty()) {
            $plansDescription = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö eSIM-–ø–ª–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
        } else {
            $plansDescription = "";
            foreach ($plans as $plan) {
                $plansDescription .= "Plan: {$plan->plan_name}\n";
                $plansDescription .= "–¶–µ–Ω–∞: {$plan->price} {$plan->currency}\n";
                $plansDescription .= "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {$plan->period} –¥–Ω–µ–π\n\n";
            }
        }

        $userContent = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: \"$userMessage\"\n\n–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:\n" . $plansDescription;

        $response = Http::withToken(env('OPENAI_API_KEY'))
            ->post('https://api.openai.com/v1/chat/completions', [
                'model' => env('OPENAI_MODEL', 'gpt-3.5-turbo'),
                'messages' => [
                    ['role' => 'system', 'content' => $systemPrompt],
                    ['role' => 'user', 'content' => $userContent],
                ],
            ]);

        if ($response->successful()) {
            $json = $response->json();

            if (isset($json['choices'][0]['message']['content'])) {
                return trim($json['choices'][0]['message']['content']);
            }
        }

        Log::error('OpenAI API error', [
            'status' => $response->status(),
            'body'   => $response->body(),
        ]);

        return '‚ùå –û—à–∏–±–∫–∞ –æ—Ç GPT.';
    }

}
